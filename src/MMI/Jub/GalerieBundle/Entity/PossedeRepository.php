<?php

namespace MMI\Jub\GalerieBundle\Entity;

use Doctrine\ORM\EntityRepository;
//use FOS\UserBundle\Entity\User;
//use FOS\UserBundle\Entity\User;

/**
 * PossedeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PossedeRepository extends EntityRepository
{

	/**
	 * Add cis
	 *
	 * @param \MMI\Jub\GalerieBundle\Entity\Ci $cis
	 * @return Possede
	 */
	public function addCi(\MMI\Jub\GalerieBundle\Entity\Ci $cis)
	{
		$this->cis[] = $cis;
	
		return $this;
	}
	
	
	/**
	 * Remove cis
	 *
	 * @param \MMI\Jub\GalerieBundle\Entity\Ci $cis
	 */
	public function removeCi(\MMI\Jub\GalerieBundle\Entity\Ci $ci)
	{
		$this->cis->removeElement($ci);
	}
		
	/**
	 * 
	 * Trouve une ligne d'association entre un ci et un utilisateur
	 * et la détruit
	 * (via le ci et le user non-associé)
	 * 
	 * @param Ci $ci
	 * @param User $user
	 */
	public function findByIdCiAndIdUserDel(Ci $ci, User $user){

		$qb = $this->createQueryBuilder('a');
			
		$qb->where('a.ciP = :ci')
			->setParameter('ci', $ci->getId())
		->andWhere('a.user = :user')
			->setParameter('user', $user->getId())
		->delete();
		
		return $qb
		->getQuery()
		->getResult();
	}
	
	/**
	 * supprime une association entre un CI et un user
	 * (via l'association elle-meme)
	 * 
	 * @param unknown $possede
	 */
	public function deletePossede($possede){
		$possede->delete;
	}
	
	/**
	 *
	 * Masquer ou afficher un centre d'interet
	 *
	 * @param Ci $ci
	 * @param User $user
	 * @param boolean $masque
	 */
	public function updateMasque(Ci $ci, User $user, $masque){
	
		$qb = $this->createQueryBuilder('a');
			
		$qb->where('a.ciP = :ci')
			->setParameter('ci', $ci->getId())
		->andWhere('a.user = :user')
			->setParameter('user', $user->getId())
		->set('a.masque', ':masque')
			->setParameter('masque', $masque)
			->update();
				
		return $qb
		->getQuery()
		->getResult();
	}
	
	/**
	 *
	 * Trouve une ligne d'association entre un ci et un utilisateur
	 *
	 * @param Ci $ci
	 * @param User $user
	 */
	public function findByIdCiAndIdUser(Ci $ci, User $user){
	
		$qb = $this->createQueryBuilder('a');
			
		$qb->where('a.ciP = :ci')
		->setParameter('ci', $ci->getId())
		->andWhere('a.user = :user')
		->setParameter('user', $user->getId());
		
		return $qb
		->getQuery()
		->getResult();
	}
}
